"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const path_1 = __importDefault(require("path"));
const postcss_1 = __importDefault(require("postcss"));
const postcss_js_1 = __importDefault(require("postcss-js"));
const tsserverlibrary_1 = __importDefault(require("typescript/lib/tsserverlibrary"));
const config_1 = require("./config");
const css_1 = require("./css");
const extract_1 = require("./extract");
const format_1 = require("./format");
const options_1 = require("./options");
const util_1 = require("./util");
const factory = (mod) => {
    const create = (info) => {
        const log = (logText) => info.project.projectService.logger.info(`[ts-css-modules-vite-plugin] "${logText}"`);
        let dirName = info.project.getCurrentDirectory();
        const options = (0, options_1.getPluginOptions)(log, info.config);
        dirName = path_1.default.resolve(dirName, options.root);
        log(`dirName: ${dirName}`);
        log(`options: ${JSON.stringify(options)}`);
        // resolve vite.config.ts
        const config = (0, config_1.getViteConfig)(log, dirName);
        const { languageService: ls, languageServiceHost: lsh } = info;
        if (!config) {
            log("Could not find vite.config.ts");
            return ls;
        }
        // evacuate the original
        const delegate = {
            getQuickInfoAtPosition: ls.getQuickInfoAtPosition,
            createLanguageServiceSourceFile: mod.typescript.createLanguageServiceSourceFile,
            updateLanguageServiceSourceFile: mod.typescript.updateLanguageServiceSourceFile,
            resolveModuleNames: lsh.resolveModuleNames,
        };
        const generateScriptSnapshot = (scriptSnapshot, fileName) => {
            if ((0, util_1.isCSSFile)(fileName)) {
                if (config) {
                    let css = scriptSnapshot.getText(0, scriptSnapshot.getLength());
                    if (fileName.endsWith(".css")) {
                    }
                    else {
                        try {
                            css = (0, css_1.parseCss)(log, css, fileName, config);
                            log(`css: ${css}`);
                        }
                        catch (e) {
                            log(`${e}`);
                        }
                    }
                    const toParseCase = (0, options_1.getParseCase)(config);
                    const classNameKeys = (0, extract_1.extractClassNameKeys)(postcss_js_1.default.objectify(postcss_1.default.parse(css)), toParseCase);
                    for (const classNameKey of classNameKeys) {
                        log(`classNameKey: ${classNameKey}`);
                    }
                    scriptSnapshot = tsserverlibrary_1.default.ScriptSnapshot.fromString((0, format_1.formatClassNames)(classNameKeys));
                }
            }
            return scriptSnapshot;
        };
        mod.typescript.createLanguageServiceSourceFile = (fileName, scriptSnapshot, scriptTarget, version, setNodeParents, scriptKind) => {
            return delegate.createLanguageServiceSourceFile(fileName, generateScriptSnapshot(scriptSnapshot, fileName), scriptTarget, version, setNodeParents, scriptKind);
        };
        mod.typescript.updateLanguageServiceSourceFile = (sourceFile, scriptSnapshot, version, textChangeRange, aggressiveChecks) => {
            const fileName = sourceFile.fileName;
            return delegate.updateLanguageServiceSourceFile(sourceFile, generateScriptSnapshot(scriptSnapshot, fileName), version, textChangeRange, aggressiveChecks);
        };
        if (lsh.resolveModuleNames) {
            const _resolveModuleNames = lsh.resolveModuleNames.bind(info.languageServiceHost);
            lsh.resolveModuleNames = (moduleNames, containingFile, reusedNames, redirectedReference, $options) => {
                const resolvedModules = _resolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, $options);
                return moduleNames.map((moduleName, index) => {
                    if (resolvedModules[index]) {
                        return {
                            ...resolvedModules[index],
                        };
                    }
                    if ((0, util_1.isCSSFile)(moduleName)) {
                        return {
                            resolvedFileName: path_1.default.resolve(path_1.default.dirname(containingFile), moduleName),
                            isExternalLibraryImport: false,
                            extension: mod.typescript.Extension.Dts,
                        };
                    }
                    return resolvedModules[index];
                });
            };
        }
        return ls;
    };
    const pluginModule = {
        create,
    };
    return pluginModule;
};
module.exports = factory;
